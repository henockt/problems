# Problem: Symmetric tree - https://leetcode.com/problems/symmetric-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        function<bool (TreeNode*, TreeNode*)> check = [&](TreeNode* n, TreeNode* m) {
            if (!n && !m) return true;
            if (!n || !m) return false;
            return n->val == m->val && check(n->left, m->right) && check(n->right, m->left);
        };

        if (!root) return false;
        return check(root->left, root->right);
    }
};